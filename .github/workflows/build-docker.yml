# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  pull_request:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: demeter           # set this to your Amazon ECR repository name
#   ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
#   ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
#   ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
#                                                # file, e.g. .aws/task-definition.json
#   CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
#                                                # containerDefinitions section of your task definition
  SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY_TRAVIS_USER }}
  AWS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   BRANCH_NAME: ${{ github.ref_name }}
  BRANCH_NAME: ${{ github.base_ref }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Register SSH key(s) for private dependencies
      # Make sure the @v0.8.0 matches the current version of the action (https://github.com/marketplace/actions/webfactory-ssh-agent)
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ env.SSH_KEY }}
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_KEY }}
        aws-secret-access-key: ${{ env.AWS_SECRET }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |

        # All pre-commit and pytest are taken care of by py-build-support
        # install:
        git checkout $BRANCH_NAME
        pip install git+ssh://git@github.com/SenteraLLC/py-build-support.git@v1.0.3
        VERSION=$(build-support get-build-version)
        LOCAL_IMAGE=$(build-support build $ECR_REPOSITORY $VERSION --use_cache)
        docker run --entrypoint pre-commit ${LOCAL_IMAGE} run --all-files
        build-support deploy $LOCAL_IMAGE
        # # Build a docker container and push it to ECR so that it can be deployed to ECS.
        # # ssh -T git@github.com
        # echo $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        # docker build --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        # # docker build --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        # echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #     container-name: ${{ env.CONTAINER_NAME }}
    #     image: ${{ steps.build-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true


# language: python
# python: "3.10"
# dist: focal

# sudo: required
# services:
#   - docker

# # Travis needs AWS credentials for deploying build artifacts to
# # ECR. This is accomplished by pasting AWS_ACCESS_KEY_ID and
# # AWS_SECRET_ACCESS_KEY environment values in the Travis UI. The
# # credentials are for the "build" user in our AWS admin account.

# # Travis needs a valid Github SSH key for installing private dependencies
# #   ssh-keygen -t rsa -b 4096 -f id_rsa -N '' -m PEM
# #   [paste id_rsa.pub to Github Sentera-Travis user]
# #   [grant Sentera-Travis read access to private dependencies]
# #   [paste id_rsa to Travis repo settings]

# env:
#   global:
#     - SERVICE_NAME=bayer-canola-modeling

# # All pre-commit and pytest are taken care of by py-build-support
# install:
#   - git checkout $TRAVIS_BRANCH
#   - pip install git+ssh://git@github.com/SenteraLLC/py-build-support.git@v1.0.3
#   - VERSION=$(build-support get-build-version)
#   - LOCAL_IMAGE=$(build-support build $SERVICE_NAME $VERSION --use_cache)

# script:
#   - docker run --entrypoint pre-commit ${LOCAL_IMAGE} run --all-files

# deploy:
#   provider: script
#   skip_cleanup: true
#   script: build-support deploy $LOCAL_IMAGE
#   on:
#       all_branches: true
#       tags: false