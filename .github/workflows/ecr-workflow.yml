name: Build and Publish Docker Image

on:
  pull_request:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: demeter
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY_TRAVIS_USER }}
  AWS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BRANCH_NAME: ${{ github.head_ref }}
  IMAGE_TAG: ${{ github.sha }}


jobs:
  aws-ecr:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Register SSH key(s) for private dependencies
        # Make sure the @v0.8.0 matches the current version of the action (https://github.com/marketplace/actions/webfactory-ssh-agent)
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_KEY }}
          aws-secret-access-key: ${{ env.AWS_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4

      - name: Prepare Images
        run: |
          echo "IMAGE_TAG=$(echo ${{ env.ECR_REPOSITORY }}:${{ env.GITHUB_HEAD_REF_SLUG }} )" >> $GITHUB_ENV

      - name: Docker Compose
        id: docker-compose
        uses: isbang/compose-action@v1.5.1
        with:
          compose-file: "./docker-compose.yml"
          up-flags: "--build"
          services: |
            postgres
            python

      - name: Push to ECR
        id: ecr
        uses: jwalton/gh-ecr-push@v1.3.6
        env:
          IMAGE_TAG: ${{ env.ECR_REPOSITORY }}:${{ env.GITHUB_HEAD_REF_SLUG }}
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: ${{ env.AWS_REGION }}
          local-image: ${{ env.IMAGE_TAG }}
          image: ${{ env.IMAGE_TAG }}, ${{ env.ECR_REPOSITORY }}:latest
