name: Build and Publish Docker Image

on:
  push:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: demeter
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY_TRAVIS_USER }}
  AWS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BRANCH_NAME: ${{ github.head_ref }}
  IMAGE_TAG: ${{ github.sha }}

#   env:
#     AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
#     AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
#     AWS_DEFAULT_REGION: ${{secrets.AWS_DEFAULT_REGION}}

jobs:
  aws-ecr:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Register SSH key(s) for private dependencies
        # Make sure the @v0.8.0 matches the current version of the action (https://github.com/marketplace/actions/webfactory-ssh-agent)
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_KEY }}
          aws-secret-access-key: ${{ env.AWS_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4

    #   - name: Docker Build
    #     id: docker-build
    #     env:
    #       REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     run: docker build . -t $REGISTRY/$ECR_REPOSITORY:$GITHUB_REF_SLUG --build-arg SSH_PRIVATE_KEY="${{ env.SSH_PRIVATE_KEY }}"

      - name: Prepare Images
        run: |
          echo "REGISTRY=$(echo ${{ steps.login-ecr.outputs.registry }} )" >> $GITHUB_ENV
          echo "IMAGE_NAME=$(echo ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.GITHUB_REF_SLUG }} )" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(echo ${{ env.ECR_REPOSITORY }}:${{ env.GITHUB_REF_SLUG }} )" >> $GITHUB_ENV

      - name: Docker Compose
        id: docker-compose
        uses: isbang/compose-action@v1.5.1
        with:
          compose-file: "./docker-compose.yml"
        #   down-flags: "--volumes"
          up-flags: "--build"
        #   compose-flags: "--push"
          services: |
            postgres
            python
        # env:
        #   DOCKER_USERNAME: ${{ steps.login-ecr.outputs.docker_username_123456789012_dkr_ecr_us_east_1_amazonaws_com }}
        #   DOCKER_PASSWORD: ${{ steps.login-ecr.outputs.docker_password_123456789012_dkr_ecr_us_east_1_amazonaws_com  }}

      - name: Docker Run
        id: docker-run
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run:
          echo "DOCKER_IMAGES=$(echo $(docker images))" >> $GITHUB_ENV
          # docker run $REGISTRY/$ECR_REPOSITORY:$GITHUB_REF_SLUG $ECR_REPOSITORY --help
        #   docker run p:v0 demeter --help

      - name: Docker Push
        id: docker-push
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        #   run: docker push $REGISTRY/$ECR_REPOSITORY:$GITHUB_REF_SLUG
        run: |
          docker tag demeter $REGISTRY/$ECR_REPOSITORY:$GITHUB_REF_SLUG
          docker push $REGISTRY/$ECR_REPOSITORY:$GITHUB_REF_SLUG
        #   docker push $REGISTRY/demeter:v0

    #   - name: Push to ECR
    #     id: ecr
    #     uses: jwalton/gh-ecr-push@v1.3.6
    #     # env:
    #     #   IMAGE_NAME: ${{ steps.login-ecr.outputs.registry }}/demeter:dem-349-update-dotenv
    #     #   IMAGE: ${{ env.ECR_REPOSITORY }}:${{ env.GITHUB_REF_SLUG }}
    #     with:
    #       access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #       region: ${{ env.AWS_REGION }}
    #       local-image: demeter
    #       image: ${{ env.IMAGE_TAG }}, ${{ env.ECR_REPOSITORY }}:latest
    #     #   local-image: ${{ env.IMAGE }}
    #     #   image: ${{ env.IMAGE }}, ${{ env.ECR_REPOSITORY }}:latest

    #   - name: Docker Run
    #     id: docker-run
    #     # env:
    #     #   REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     env:
    #       REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     run:
    #       docker compose run $REGISTRY/$ECR_REPOSITORY:$GITHUB_REF_SLUG $ECR_REPOSITORY --help

    #   - name: Docker Push
    #     id: docker-push
    #     env:
    #       REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     run: docker compose push $REGISTRY/$ECR_REPOSITORY:$GITHUB_REF_SLUG