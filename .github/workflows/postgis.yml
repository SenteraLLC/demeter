name: Testing PostgreSQL + PostGIS

on:
  pull_request:
  push:
    branches: [main]

jobs:
  test:
    name: Test demeter module
    runs-on: ubuntu-latest
    env:
      working_directory: ./
      SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY_TRAVIS_USER }}
      DB_PW: ${{ secrets.GHA_POSTGRES_PASSWORD }}

    services:
      postgres:
        # name: Attach to PostGIS Docker Image
        # container_name: postgisTestContainer
        image: postgis/postgis:14-3.4
        # restart: always
        env:
          # must specify password for PG Docker container image, see: https://registry.hub.docker.com/_/postgres?tab=description&page=1&name=10
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: ${{ env.SSH_KEY }}
        ports:
          - 5432:5432
        volumes:
          - postgres:/var/lib/postgresql/data
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Register SSH key(s) for private dependencies
        # Make sure the @v0.8.0 matches the current version of the action (https://github.com/marketplace/actions/webfactory-ssh-agent)
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ env.SSH_KEY }}
      - name: Install Poetry
        run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          cache: 'poetry'
      - name: Install project
        run: poetry install
      - name: Create demeter-dev Database
        run: PGPASSWORD=${{ env.DB_PW }} sudo -u postgres psql -c 'CREATE DATABASE "demeter-dev";'
      - name: Initialize Test Database
        run: poetry run python3 -m initialize.schema.demeter --schema_name demeter
        working-directory: ${{env.working_directory}}
        env:
          DEMETER-DEV_LOCAL_SUPER: "{'host': 'localhost', 'port':'5432', 'username':'postgres', 'password':'${{ env.DB_PW }} ', 'database':'demeter-dev'}"
      - name: Test some module
        run: poetry run pytest
        working-directory: ${{env.working_directory}}
        env:
          DEMETER-DEV_LOCAL_SUPER: "{'host': 'localhost', 'port':'5432', 'username':'postgres', 'password':'${{ env.DB_PW }} ', 'database':'demeter-dev'}"
