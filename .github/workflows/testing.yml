name: Testing

on:
  pull_request:
  push:
    branches: [main]
  workflow_call:
    secrets:
      token:
        required: true
  workflow_dispatch:

env:
  working_directory: ./
  SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY_TRAVIS_USER }}
  DB_PW: ${{ secrets.GHA_POSTGRES_PASSWORD }}
  DEMETER-DEV_LOCAL_SUPER: "{'host': 'localhost', 'port':'5432', 'username':'postgres', 'password':'${{ secrets.GHA_POSTGRES_PASSWORD }}', 'database':'demeter-dev'}"
  TEST_DEMETER_SETUP: "{'host':'localhost', 'port':'5432', 'username':'postgres', 'password':'${{ secrets.GHA_POSTGRES_PASSWORD }}', 'database':'demeter-dev', 'search_path':'test_demeter,weather,public'}"
  TEST_DEMETER_RW: "{'host':'localhost', 'port':'5432', 'username':'demeter_user', 'password':'icanreadwrite', 'database':'demeter-dev', 'search_path':'test_demeter,weather,public'}"
  TEST_DEMETER_RO: "{'host':'localhost', 'port':'5432', 'username':'demeter_ro_user', 'password':'icanonlyread', 'database':'demeter-dev', 'search_path':'test_demeter,weather,public'}"
  demeter_user_password: 'icanreadwrite'
  demeter_ro_user_password: 'icanonlyread'
  weather_user_password: 'icanreadwritewx'
  weather_ro_user_password: 'icanonlyreadwx'
  raster_user_password: 'icanreadwriterast'
  raster_ro_user_password: 'icanonlyreadrast'

jobs:
  install-project:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Register SSH key(s) for private dependencies
        # Make sure the @v0.8.0 matches the current version of the action (https://github.com/marketplace/actions/webfactory-ssh-agent)
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ env.SSH_KEY }}
      - name: Install Poetry
        run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          cache: 'poetry'
      - name: Install project
        run: poetry install
  postgres-setup:
    # name: Setup database
    needs: install-project
    runs-on: ubuntu-latest
    container:
    services:
      db:
        # name: Attach to PostGIS Docker Image
        # container_name: postgisTestContainer
        image: postgis/postgis:14-3.4
        # restart: always
        env:
          # must specify password for PG Docker container image, see: https://registry.hub.docker.com/_/postgres?tab=description&page=1&name=10
          POSTGRES_USER: postgres
        #   POSTGRES_DB: postgres
          POSTGRES_PASSWORD: ${{ env.DB_PW }}
        ports:
          - 5432:5432
        volumes:
          - db:/var/lib/postgresql/data
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Install PostGIS  # Needed to use raster2pgsql
        run: sudo apt install postgis
      - name: Create Test Database
        run: PGPASSWORD=${{ env.DB_PW }} psql -h localhost -U postgres -p 5432 -c 'CREATE DATABASE "demeter-dev";'
      - name: Initialize Database Users and Schemas
        # poetry run python3 -m intialize.all
        run: |
          poetry run python3 -m initialize.users
          poetry run python3 -m initialize.schema.demeter --schema_name demeter
          poetry run python3 -m initialize.schema.raster
          poetry run python3 -m initialize.schema.weather
        working-directory: ${{ env.working_directory }}
  testing:
    needs: [install-project, postgres-setup]
    runs-on: ubuntu-latest
    steps:
      - name: Test demeter module
        run: poetry run pytest
        working-directory: ${{ env.working_directory }}
